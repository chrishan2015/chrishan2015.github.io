一、 基础知识：一个threejs程序至少要包括Renderer（渲染器），Scene（场景），Camera（照相机），以及你在场景中常见的物体。
    1、 在头部引入three.js文件；
    2、 WebGL的渲染需要HTML5 Canvas元素，可以手动在html中定义或者用three.js生成。threejs使用的是右手坐标系（z轴向外）
    3、 Renderer渲染器：
        （1）如果在HTML中定义了canvas元素：
            var renderer = new THREE.WebGLRenderer({
                canvas: document.getElementById('mainCanvas')
            });
        （2）如果用threejs生成canvas元素：
            var renderer = new THREE.WebGLRenderer();
            renderer.setSize(400, 300);//设置canvas元素宽高
            document.getElementsByTagName('body')[0].appendChild(renderer.domElement);//将canvas元素添加到body中
        （3）设置背景色（用于清除画面的颜色）：
            renderer.setClearColor(0x000000);
        （4）如果你的应用程序运行在一个低分辨率的情况下，但是你想保持程序的视窗大小，你可以在调用setSize的时候并把updateStyle设置为false
            renderer.setSize(window.innerWidth/2, window.innerHeight/2, false)
    4、 Scene场景：
        在threejs中添加的物体都是添加到场景中的，因此他相当于一个大容器。一般说，场景里没有很复杂的操作，在程序最开始的时候进行实例化，然后将物体添加到场景中即可。
        var scene = new THREE.Scene();
    5、 Camera照相机：
        要被添加进场景中。例：
        var camera = new THREE.PerspectiveCamera(45, 4 / 3, 1, 1000);
        camera.position.set(0, 0, 5);
        scene.add(camera);
    6、 渲染：
        在定义了场景中的物体，设置好了照相机之后，渲染器就知道如何渲染出二位的家国了。这时候，我们只需要调用渲染器的渲染函数，就能使其渲染一次了。
        renderer.render(scene, camera);
二、 照相机
    1、 正交投影照相机：
        （1）、THREE.OrthographicCamera(left, right, top, bottom, near, far)；这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，这六个面围成一个长方体，我们称其为视景体（Frustum）。只有在视景体内部（下图中的灰色部分）的物体才可能显示在屏幕上，而视景体外的物体会在显示之前被裁减掉。
        （2）为了保持照相机的横竖比例，需要保证(right - left)与(top - bottom)的比例与Canvas宽度与高度的比例一致。
        （3）near与far都是指到照相机位置在深度平面的位置，而照相机不应该拍摄到其后方的物体，因此这两个值应该均为正值。为了保证场景中的物体不会因为太近或太远而被照相机忽略，一般near的值设置得较小，far的值设置得较大，具体值视场景中物体的位置等决定。
        （4）camera.lookAt(new THREE.Vector3(0, 0, 0));照相机默认是沿z轴负方向观察的，我们可以通过lookAt函数指定它看着原点方向。
    2、 透视投影照相机：
        （1）、THREE.PerspectiveCamera(fov, aspect, near, far)；视景体，是可能被渲染的物体所在的区域。fov是视景体竖直方向上的张角（是角度制而非弧度制）。aspect等于width / height，是照相机水平方向和竖直方向长度的比值，通常设为Canvas的横纵比例。near和far分别是照相机到视景体最近、最远的距离，均为正值，且far应大于near。
三、 几何物体
    1、 立方体：
        THREE.CubeGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)
        这里，width是x方向上的长度；height是y方向上的长度；depth是z方向上的长度；后三个参数分别是在三个方向上的分段数，如widthSegments为3的话，代表x方向上水平分为三份。一般情况下不需要分段的话，可以不设置后三个参数，后三个参数的缺省值为1。其他几何形状中的分段也是类似的，下面不做说明。
    2、 平面：
        THREE.PlaneGeometry(width, height, widthSegments, heightSegments)
        这里的平面（PlaneGeometry）其实是一个长方形，而不是数学意义上无限大小的平面。其中，width是x方向上的长度；height是y方向上的长度；后两个参数同样表示分段。如果需要创建的平面在x轴和z轴所在的平面内，可以通过物体的旋转来实现。
    3、 球体：
        THREE.SphereGeometry(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength)
        其中，radius是半径；segmentsWidth表示经度上的切片数；segmentsHeight表示纬度上的切片数；phiStart表示经度开始的弧度；phiLength表示经度跨过的弧度；thetaStart表示纬度开始的弧度；thetaLength表示纬度跨过的弧度。
    4、 圆形：
        THREE.CircleGeometry(radius, segments, thetaStart, thetaLength)
        在x轴和y轴所在平面创建圆形或者扇形
    5、 圆柱体：
        THREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded)
        其中，radiusTop与radiusBottom分别是顶面和底面的半径，由此可知，当这两个参数设置为不同的值时，实际上创建的是一个圆台；height是圆柱体的高度；radiusSegments与heightSegments可类比球体中的分段；openEnded是一个布尔值，表示是否没有顶面和底面，缺省值为false，表示有顶面和底面。
    6、 正四面体、正八面体、正十二面体：
        THREE.TetrahedronGeometry(radius, detail)
        THREE.OctahedronGeometry(radius, detail)
        THREE.IcosahedronGeometry(radius, detail)
        其中，radius是半径；detail是细节层次（Level of Detail）的层数，对于大面片数模型，可以控制在视角靠近物体时，显示面片数多的精细模型，而在离物体较远时，显示面片数较少的粗略模型。这里我们不对detail多作展开，一般可以对这个值缺省。
    7、 圆环面：
        THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)
        其中，radius是圆环半径；tube是管道半径；radialSegments与tubularSegments分别是两个分段数，详见上图；arc是圆环面的弧度，缺省值为Math.PI * 2。
    8、 圆环结：
        THREE.TorusKnotGeometry(radius, tube, radialSegments, tubularSegments, p, q, heightScale)
        前四个参数在圆环面中已经有所介绍，p和q是控制其样式的参数，一般可以缺省，如果需要详细了解，请学习圆环结的相关知识；heightScale是在z轴方向上的缩放。
    9、 自定义形状：
        THREE.Geometry()：例
            // 初始化几何形状
            var geometry = new THREE.Geometry();

            // 设置顶点位置
            // 顶部4顶点
            geometry.vertices.push(new THREE.Vector3(-1, 2, -1));
            geometry.vertices.push(new THREE.Vector3(1, 2, -1));
            geometry.vertices.push(new THREE.Vector3(1, 2, 1));
            geometry.vertices.push(new THREE.Vector3(-1, 2, 1));
            // 底部4顶点
            geometry.vertices.push(new THREE.Vector3(-2, 0, -2));
            geometry.vertices.push(new THREE.Vector3(2, 0, -2));
            geometry.vertices.push(new THREE.Vector3(2, 0, 2));
            geometry.vertices.push(new THREE.Vector3(-2, 0, 2));

            // 设置顶点连接情况
            // 顶面
            geometry.faces.push(new THREE.Face3(0, 1, 3));
            geometry.faces.push(new THREE.Face3(1, 2, 3));
            // 底面
            geometry.faces.push(new THREE.Face3(4, 5, 6));
            geometry.faces.push(new THREE.Face3(5, 6, 7));
            // 四个侧面
            geometry.faces.push(new THREE.Face3(1, 5, 6));
            geometry.faces.push(new THREE.Face3(6, 2, 1));
            geometry.faces.push(new THREE.Face3(2, 6, 7));
            geometry.faces.push(new THREE.Face3(7, 3, 2));
            geometry.faces.push(new THREE.Face3(3, 7, 0));
            geometry.faces.push(new THREE.Face3(7, 4, 0));
            geometry.faces.push(new THREE.Face3(0, 4, 5));
            geometry.faces.push(new THREE.Face3(0, 5, 1));
    10、画线：
        LineBasicMaterial( parameters )
        Parameters是一个定义材质外观的对象，它包含多个属性来定义材质，这些属性是：
        Color：线条的颜色，用16进制来表示，默认的颜色是白色。
        Linewidth：线条的宽度，默认时候1个单位宽度。
        Linecap：线条两端的外观，默认是圆角端点，当线条较粗的时候才看得出效果，如果线条很细，那么你几乎看不出效果了。
        Linejoin：两个线条的连接点处的外观，默认是“round”，表示圆角。
        VertexColors：定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值。
        Fog：定义材质的颜色是否受全局雾效的影响。

        //画线
        var geometry = new THREE.Geometry();                                                 //声明几何体
        var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors} );   //定义线条材质
        var color1 = new THREE.Color( 0x444444 ), color2 = new THREE.Color( 0xFF0000 );

        // 线的材质可以由2点的颜色决定
        var p1 = new THREE.Vector3( -100, 0, 100 );
        var p2 = new THREE.Vector3(  100, 0, -100 );
        geometry.vertices.push(p1);
        geometry.vertices.push(p2);
        geometry.colors.push( color1, color2 );

        var line = new THREE.Line( geometry, material, THREE.LinePieces );                  //定义线条，使用THREE.Line类
        scene.add(line);
四、 文字形状：可以用来创建三维的文字形状。使用文字形状需要下载和引用额外的字体库。
    1、 加载文字
        var loader = new THREE.FontLoader();
        loader.load('../lib/helvetiker_regular.typeface.json', function(font) {
            var mesh = new THREE.Mesh(new THREE.TextGeometry('Hello', {
                font: font,
                size: 1,
                height: 1
            }), material);
            scene.add(mesh);

            // render
            renderer.render(scene, camera);
        });
    2、 THREE.TextGeometry(text, parameters)
        其中，text是文字字符串，parameters是以下参数组成的对象：
        size：字号大小，一般为大写字母的高度
        height：文字的厚度
        curveSegments：弧线分段数，使得文字的曲线更加光滑
        font：字体，默认是'helvetiker'，需对应引用的字体文件
        weight：值为'normal'或'bold'，表示是否加粗
        style：值为'normal'或'italics'，表示是否斜体
        bevelEnabled：布尔值，是否使用倒角，意为在边缘处斜切
        bevelThickness：倒角厚度
        bevelSize：倒角宽度
五、 材质：材质（Material）是独立于物体顶点信息之外的与渲染效果相关的属性。通过设置材质可以改变物体的颜色、纹理贴图、光照模式等。
    1、 基本材质：
    （1）使用基本材质的物体，渲染后物体的颜色始终为该材质的颜色，而不会由于光照产生明暗、阴影效果。如果没有指定材质的颜色，则颜色是随机的。其构造函数是：
    （2）THREE.MeshBasicMaterial(opt)其中，opt可以缺省，或者为包含各属性的值。如新建一个不透明度为0.75的黄色材质：new THREE.MeshBasicMaterial({color: 0xffff00,opacity: 0.75});
    （3）visible：是否可见，默认为true
        side：渲染面片正面或是反面，默认为正面THREE.FrontSide，可设置为反面THREE.BackSide，或双面THREE.DoubleSide
        wireframe：是否渲染线而非面，默认为false
        color：十六进制RGB颜色，如红色表示为0xff0000
        map：使用纹理贴图
    2、 Lambert材质：
    （1）只考虑漫反射而不考虑镜面反射的效果，因而对于金属、镜子等需要镜面反射效果的物体就不适应，对于其他大部分物体的漫反射效果都是适用的。
    （2）new THREE.MeshLambertMaterial(opt)
    （3）color：是用来表现材质对散射光的反射能力，也是最常用来设置材质颜色的属性
        ambient：表示对环境光的反射能力，只有当设置了AmbientLight后，该值才是有效的，材质对环境光的反射能力与环境光强相乘后得到材质实际表现的颜色。
        emissive：是材质的自发光颜色，可以用来表现光源的颜色。单独使用红色的自发光：
    3、 Phong材质：
    （1）考虑了镜面反射的效果，因此对于金属、镜面的表现尤为适合
    （2）new THREE.MeshPhongMaterial(opt)
    （3）color：是用来表现材质对散射光的反射能力，也是最常用来设置材质颜色的属性
        ambient：表示对环境光的反射能力，只有当设置了AmbientLight后，该值才是有效的，材质对环境光的反射能力与环境光强相乘后得到材质实际表现的颜色。
        emissive：是材质的自发光颜色，可以用来表现光源的颜色。单独使用红色的自发光：
        specular：指定镜面光
        shininess：值越大时，高光的光斑越小，默认值为30
    4、 法向材质：可以将材质的颜色设置为其法向量的方向，有时候对于调试很有帮助。
    （1）new THREE.MeshNormalMaterial()材质的颜色与照相机与该物体的角度相关
    5、 材质的纹理贴图
    （1）导入图像作为纹理贴图，并添加到相应的材质中
    （2）一个面var texture = THREE.ImageUtils.loadTexture('../img/0.png', {}, function() {
            renderer.render(scene, camera);
        });
        var material = new THREE.MeshLambertMaterial({
            map: texture
        });
    （3）六个面var materials = [];
        for (var i = 0; i < 6; ++i) {
            materials.push(new THREE.MeshBasicMaterial({
                map: THREE.ImageUtils.loadTexture('../img/' + i + '.png',
                        {}, function() {
                            renderer.render(scene, camera);
                        }),
                overdraw: true
            }));
        }

        var cube = new THREE.Mesh(new THREE.CubeGeometry(5, 5, 5),
                new THREE.MeshFaceMaterial(materials));
        scene.add(cube);
    （4）棋盘格var texture = THREE.ImageUtils.loadTexture('../img/chess.png', {}, function() {
            renderer.render(scene, camera);
        });
        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;//重复方式为两个方向（wrapS和wrapT）都重复
        texture.repeat.set(4, 4);//设置两个方向上都重复4次
六、 网格：网格是由顶点、边、面等组成的物体
    1、 创建网格：
    （1）Mesh(geometry, material)
    （2）如果不指定material，则每次会随机分配一种wireframe为true的材质，每次刷新页面后的颜色是不同的
    2、 修改属性：
    （1）除了在构造函数中指定材质，在网格被创建后，也能对材质进行修改
        var material = new THREE.MeshLambertMaterial({
            color: 0xffff00
        });
        var geometry = new THREE.CubeGeometry(1, 2, 3);
        var mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);

        mesh.material = new THREE.MeshLambertMaterial({
            color: 0xff0000
        });
    （2）位置、旋转、缩放
        THREE.Vector3有x、y、z三个属性，如果只设置其中一个属性，则可以用以下方法：mesh.position.z = 1;
        如果需要同时设置多个属性，可以使用以下两种方法：mesh.position.set(1.5, -0.5, 0);或mesh.position = new THREE.Vector3(1.5, -0.5, 0);
七、 动画
    1、 <script type="text/javascript" src="stats.min.js"></script><!--实时的FPS信息，从而更好地监测动画效果。它占据屏幕中的一小块位置（如左上角）。单击后显示每帧渲染时间-->
    2、 var stat = null;
        function init() {
            stat = new Stats();
            stat.domElement.style.position = 'absolute';
            stat.domElement.style.right = '0px';
            stat.domElement.style.top = '0px';
            document.body.appendChild(stat.domElement);

            // Three.js init ...
        }
        然后，在上一节介绍的动画重绘函数draw中调用stat.begin();与stat.end();分别表示一帧的开始与结束：最终就能得到FPS效果了。
    3、 requestAnimationFrame跟js一样
八、 外部模型：以3ds Max为例，介绍如何导入外部模型。
    1、 Three.js有一系列导入外部文件的辅助函数，是在three.js之外的，使用前需要额外下载，在https://github.com/mrdoob/three.js/tree/master/examples/js/loaders可以找到。
    *.obj是最常用的模型格式，导入*.obj文件需要OBJLoader.js；导入带*.mtl材质的*.obj文件需要MTLLoader.js以及OBJMTLLoader.js。另有PLYLoader.js、STLLoader.js等分别对应不同格式的加载器，可以根据模型格式自行选择。
    目前，支持的模型格式有：*.obj *.obj, *.mtl *.dae *.ctm *.ply *.stl *.wrl *.vtk
九、 光与影
    1、 环境光：
    （1）环境光是指场景整体的光照效果，是由于场景内若干光源的多次反射形成的亮度一致的效果，通常用来为整个场景指定一个基础亮度。因此，环境光没有明确的光源位置，在各处形成的亮度也是一致的。
    （2）在设置环境光时，只需要指定光的颜色：THREE.AmbientLight(hex)其中，hex是十六进制的RGB颜色信息，如红色表示为0xff0000。
        var light = new THREE.AmbientLight(0xffffff);//如果想让环境光暗些，可以将其设置为new THREE.AmbientLight(0xcccccc)等
        scene.add(light);
    （3）环境光并不在乎物体材质的color属性，而是ambient属性。ambient属性的默认值是0xffffff
    （4）不透明物体的颜色其实是其反射光的颜色，而ambient属性表示的是物体反射环境光的能力。对于0x00ff00的物体，红色通道是0，而环境光是完全的红光，因此该长方体不能反射任何光线，最终的渲染颜色就是黑色；而对于0xffffff的白色长方体，红色通道是0xff，因而能反射所有红光，渲染的颜色就是红色。
    （5）当环境光不是白色或灰色的时候，渲染的效果往往会很奇怪。因此，环境光通常使用白色或者灰色，作为整体光照的基础。
    2、 点光源：
    （1）点光源是不计光源大小，可以看作一个点发出的光源。点光源照到不同物体表面的亮度是线性递减的，因此，离点光源距离越远的物体会显得越暗。
    （2）THREE.PointLight(hex, intensity, distance)其中，hex是光源十六进制的颜色值；intensity是亮度，缺省值为1，表示100%亮度；distance是光源最远照射到的距离，缺省值为0。
    （3）例var light = new THREE.PointLight(0xffffff, 2, 100);
            light.position.set(0, 1.5, 2);
            scene.add(light);
    3、 平行光：
    （1）对于任意平行的平面，平行光照射的亮度都是相同的，而与平面所在位置无关。
    （2）THREE.DirectionalLight(hex, intensity)其中，hex是光源十六进制的颜色值；intensity是亮度，缺省值为1，表示100%亮度。此外，对于平行光而言，设置光源位置尤为重要。
    4、 聚光灯：
    （1）聚光灯是一种特殊的点光源，它能够朝着一个方向投射光线。聚光灯投射出的是类似圆锥形的光线
    （2）THREE.SpotLight(hex, intensity, distance, angle, exponent)相比点光源，多了angle和exponent两个参数。angle是聚光灯的张角，缺省值是Math.PI / 3，最大值是Math.PI / 2；exponent是光强在偏离target的衰减指数（target需要在之后定义，缺省值为(0, 0, 0)），缺省值是10。
    （3）在调用构造函数之后，除了设置光源本身的位置，一般还需要设置target：light.position.set(x1, y1, z1);light.target.position.set(x2, y2, z2);
    （4）除了设置light.target.position的方法外，如果想让聚光灯跟着某一物体移动（就像真的聚光灯！），可以target指定为该物体：
        var cube = new THREE.Mesh(new THREE.CubeGeometry(1, 1, 1),
                new THREE.MeshLambertMaterial({color: 0x00ff00}));

        var light = new THREE.SpotLight(0xffff00, 1, 100, Math.PI / 6, 25);
        light.target = cube;
    5、 阴影：
    （1）在Three.js中，能形成阴影的光源只有THREE.DirectionalLight与THREE.SpotLight；而相对地，能表现阴影效果的材质只有THREE.LambertMaterial与THREE.PhongMaterial。
    （2）我们需要在初始化时，告诉渲染器渲染阴影：renderer.shadowMapEnabled = true;然后，对于光源以及所有要产生阴影的物体调用：xxx.castShadow = true;对于接收阴影的物体调用：xxx.receiveShadow = true;
    （3）通常还需要设置光源的阴影相关属性，才能正确显示出阴影效果。
    对于聚光灯，需要设置shadowCameraNear、shadowCameraFar、shadowCameraFov三个值，类比我们在第二章学到的透视投影照相机，只有介于shadowCameraNear与shadowCameraFar之间的物体将产生阴影，shadowCameraFov表示张角。

    对于平行光，需要设置shadowCameraNear、shadowCameraFar、shadowCameraLeft、shadowCameraRight、shadowCameraTop以及shadowCameraBottom六个值，相当于正交投影照相机的六个面。同样，只有在这六个面围成的长方体内的物体才会产生阴影效果。

    为了看到阴影照相机的位置，通常可以在调试时开启light.shadowCameraVisible = true。
    （4）如果想要修改阴影的深浅，可以通过设置shadowDarkness，该值的范围是0到1，越小越浅。而如果想实现软阴影的效果，可以通过renderer.shadowMapSoft = true;方便地实现。
十、 着色器
    1、 使用着色器可以更灵活地控制渲染效果，结合纹理，可以进行多次渲染，达到更强大的效果。着色器是屏幕上呈现画面之前的最后一步，用它可以对先前渲染的结果做修改，包括对颜色、位置等等信息的修改，甚至可以对先前渲染的结果做后处理，实现高级的渲染效果。